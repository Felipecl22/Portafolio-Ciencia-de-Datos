# -*- coding: utf-8 -*-
"""For.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cMn1e2Ax5043FF0Qox5VBDbhH5NuANB4

El bucle for se utiliza para iterar sobre los elementos de una secuencia (como una lista, una tupla, un diccionario, etc.) y realizar una acción para cada elemento.
"""

# La sintaxis general del bucle for en Python es la siguiente:

for elemento in secuencia:
    # Hacer algo con el elemento

# elemento es una variable que toma el valor de cada elemento en la secuencia durante cada iteración del bucle.
# secuencia es la secuencia sobre la cual se está iterando.

# Iterando en una lista

numeros = [1, 2, 3, 4, 5]

for numero in numeros:
    print(numero, end=' ') # Se usa end = '' para imprimir los valores de forma horizontal.

valores = [(1, 2), (3, 4), (5, 6)]

for valor1, valor2 in valores:
    print("valor1:", valor1, "valor2:", valor2)

# En este ejemplo, valores es una lista de tuplas. Durante cada iteración del bucle for, las variables valor1 y valor2 tomarán los valores de las tuplas correspondientes en la lista valores.

personas = [("Juan", 30), ("María", 25), ("Pedro", 35)]

for nombre, edad in personas:
    print("Nombre:", nombre)
    print("Edad:", edad)
    print() # Da un salto en cada print

matriz = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

for fila in matriz:
    for elemento in fila:
        print(elemento, end=" ")
    print()

precios_frutas = {
    "Manzana": [1.5, 1.8, 2.0],
    "Banana": [0.8, 0.9, 1.0],
    "Naranja": [1.0, 1.2, 1.5]
}

precios_frutas.items()
# Resultado: Retorna un objeto iterable que contiene tuplas, donde cada tupla tiene dos elementos: la clave y su valor correspondiente.

precios_frutas = {
    "Manzana": [1.5, 1.8, 2.0],
    "Banana": [0.8, 0.9, 1.0],
    "Naranja": [1.0, 1.2, 1.5]
}

for fruta, precios in precios_frutas.items():
    print("Fruta:", fruta)
    print("Precios:", precios)
    print()

cuadrados = []  # Creamos una lista vacía llamada 'cuadrados'

for num in range(1, 6):
    cuadrado = num * num  # Calculamos el cuadrado de 'num'
    cuadrados.append(cuadrado)  # Agregamos el cuadrado a la lista 'cuadrados'

# Aquí num toma el primer valor del range 1 luego 2 y asi sucesivamente y a eso le multiplica el mismo valor.

print(cuadrados)  # Imprimimos la lista de cuadrados

# Iterar sobre una lista e imprimir el índice y el valor de cada elemento
frutas = ['manzana', 'banana', 'naranja']
for indice, fruta in enumerate(frutas):
    print(f'Índice: {indice}, Valor: {fruta}')

# El método enumerate() en Python se utiliza para recorrer una lista (o cualquier otro iterable) y
# obtener tanto el índice como el valor de cada elemento en la lista. Proporciona una forma conveniente
# de obtener tanto el índice como el valor en cada iteración del bucle, lo que puede ser útil en muchas situaciones.

# Uso de la función zip: La función zip se utiliza para combinar múltiples secuencias en un solo iterador, permitiendo iterar simultáneamente sobre ellas.

# Combinar dos listas y realizar una operación en cada par de elementos
lista1 = [1, 2, 3]
lista2 = ['a', 'b', 'c']
for num, letra in zip(lista1, lista2):
    print(f'Número: {num}, Letra: {letra}')

# Iteración sobre diccionarios: Puedes iterar sobre las claves, los valores o los pares clave-valor de un diccionario utilizando métodos como keys(), values() y items().

# Iterar sobre las claves y valores de un diccionario
diccionario = {'a': 1, 'b': 2, 'c': 3}
for clave, valor in diccionario.items():
    print(f'Clave: {clave}, Valor: {valor}')

# Uso de la cláusula else: Puedes utilizar la cláusula else junto con un bucle for para ejecutar un bloque de código cuando el bucle se completa sin interrupciones.
# Buscar un elemento en una lista
numeros = [1, 2, 3, 4, 5]
buscar_numero = 6
for num in numeros:
    if num == buscar_numero:
        print('Número encontrado')
        break
else:
    print('Número no encontrado')

# Uso de la función filter: La función filter se utiliza para filtrar elementos de una secuencia basada en una función de filtro.

# Filtrar números pares de una lista
numeros = [1, 2, 3, 4, 5, 6]
numeros_pares = list(filter(lambda x: x % 2 == 0, numeros))
print(numeros_pares)

# Uso de la función map: La función map se utiliza para aplicar una función a cada elemento de una secuencia.

# Calcular el cuadrado de cada número en una lista
numeros = [1, 2, 3, 4, 5]
cuadrados = list(map(lambda x: x ** 2, numeros))
print(cuadrados)

# Uso de la cláusula continue: Puedes utilizar la cláusula continue para omitir el resto del código en una iteración del bucle y pasar a la siguiente iteración.

# Imprimir solo los números impares de una lista
numeros = [1, 2, 3, 4, 5]
for num in numeros:
    if num % 2 == 0:
        continue
    print(num)

# Uso de comprensiones de conjuntos y diccionarios: Además de las comprensiones de listas, también puedes utilizar comprensiones de conjuntos y
# diccionarios para crear conjuntos y diccionarios de manera concisa.

# Crear un conjunto de números pares usando una comprensión de conjunto
numeros = {x for x in range(10) if x % 2 == 0}
print(numeros)

# Crear un diccionario de cuadrados usando una comprensión de diccionario
cuadrados = {x: x ** 2 for x in range(1, 6)}
print(cuadrados)

# Uso de try y except dentro de un bucle: Puedes utilizar bloques try y except dentro de un bucle for para manejar excepciones que pueden ocurrir durante la iteración.

# Convertir elementos de una lista a enteros y manejar excepciones
lista = ['1', 'dos', '3', 'cuatro']
numeros = []
for item in lista:
    try:
        numero = int(item)
        numeros.append(numero)
    except ValueError:
        print(f'No se pudo convertir {item} a un entero.')
print(numeros)

# Uso de sorted para ordenar una secuencia: La función sorted se puede utilizar para ordenar una secuencia y devolver una nueva lista ordenada.

# Ordenar una lista de palabras por longitud
palabras = ['manzana', 'banana', 'naranja', 'uva']
palabras_ordenadas = sorted(palabras, key=len)
print(palabras_ordenadas)

# Uso de la función reversed para iterar en reversa: La función reversed se puede utilizar para iterar sobre una secuencia en orden inverso.

# Iterar sobre una lista en reversa
lista = [1, 2, 3, 4, 5]
for num in reversed(lista):
    print(num)

# Uso de desempaquetado de tuplas: Puedes utilizar el desempaquetado de tuplas para asignar múltiples variables en una sola línea durante la iteración.

# Desempaquetar tuplas durante la iteración
coordenadas = [(1, 2), (3, 4), (5, 6)]
for x, y in coordenadas:
    print(f'Coordenadas: ({x}, {y})')

# Uso de la función itertools: El módulo itertools proporciona funciones útiles para trabajar con iteradores y combinarlos de diversas maneras, como product, combinations, permutations, entre otros.

from itertools import product

# Calcular el producto cartesiano de dos conjuntos
conjunto1 = {'a', 'b'}
conjunto2 = {1, 2}
producto_cartesiano = product(conjunto1, conjunto2)
print(list(producto_cartesiano))

# Uso de variables globales: Aunque el uso de variables globales no es generalmente recomendado debido a su impacto en la legibilidad y mantenimiento del código, a veces es necesario.
# Puedes acceder a variables globales dentro de un bucle for y modificarlas si es necesario.

# Uso de variable global dentro de un bucle
global_variable = 0

for i in range(5):
    global_variable += i

print(global_variable)  # Salida: 10

# Uso de break y continue con etiquetas: En bucles anidados, puedes utilizar break y continue con etiquetas para controlar la ejecución del bucle exterior desde el interior.
# Uso de break y continue con etiquetas
for i in range(5):
    for j in range(5):
        if i == j:
            break
        if j == 3:
            continue
        print(i, j)

# Iterar sobre múltiples secuencias simultáneamente: Puedes utilizar la función zip junto con bucles for para iterar sobre múltiples secuencias simultáneamente.

# Iterar sobre múltiples secuencias simultáneamente
nombres = ['Juan', 'María', 'Pedro']
edades = [30, 25, 35]

for nombre, edad in zip(nombres, edades):
    print(f'{nombre} tiene {edad} años.')

# Uso de else con bucles anidados: Puedes utilizar la cláusula else con un bucle for para ejecutar un bloque de código una vez que el bucle se completa sin interrupciones.

# Uso de else con bucles anidados
for i in range(5):
    for j in range(5):
        if i == j:
            break
    else:
        print("No se encontraron coincidencias.")
        break

# Iteración sobre objetos iterables personalizados: Puedes implementar el método __iter__ en tus clases para hacerlas iterables y utilizar bucles for con ellas.

# Iteración sobre un objeto iterable personalizado
class MiIterable:
    def __init__(self, data):
        self.data = data

    def __iter__(self):
        return iter(self.data)

iterable_personalizado = MiIterable([1, 2, 3, 4, 5])

for item in iterable_personalizado:
    print(item)

# Combinación de while con for: Aunque no es tan común, a veces es útil combinar un bucle while con un bucle for para manejar situaciones específicas.

# Combinación de while con for
contador = 0
while contador < 3:
    for letra in 'abc':
        print(letra * (contador + 1))
    contador += 1

# Iteración con enumerate y zip en reversa: Puedes utilizar enumerate y zip junto con reversed para iterar sobre secuencias en orden inverso mientras se realiza un seguimiento del índice.

# Iteración en reversa con enumerate y zip
nombres = ['Juan', 'María', 'Pedro']
for indice, nombre in reversed(list(enumerate(nombres))):
    print(f'{indice}: {nombre}')